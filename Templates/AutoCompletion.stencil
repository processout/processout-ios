// MARK: - AutoCompletion
{% for type in types.protocols|annotated:"AutoCompletion" %}

extension {{ type.name }} {
    {% for method in type.methods %}
        {% if not method.isAsync %}
            {% continue %}
        {% endif %}

    {% for documentation in method.documentation %}
    /// {{ documentation }}
    {% endfor %}
    {% for key, value in method.attributes %}
    {{ value.first }}
    {% endfor %}
    @discardableResult
    public func {{ method.callName }}(
        {% for parameter in method.parameters %}
        {{ parameter.asSource }},
        {% endfor %}
        completion: @escaping ({% if method.throws %}Result<{{ method.returnTypeName.asSource }}, POFailure>{% else %}{{ method.returnTypeName.asSource }}{% endif %}) -> Void
    ) -> POCancellable {
        invoke(completion: completion) {
            {% if method.throws %}try {% endif %}await {{ method.callName }}({% for parameter in method.parameters %}{% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %})
        }
    }
    {% endfor %}
}
{% if forloop.last %}

/// Invokes given completion with a result of async operation.
private func invoke<T>(
    completion: @escaping (Result<T, POFailure>) -> Void,
    after operation: @escaping () async throws -> T
) -> POCancellable {
    Task { @MainActor in
        do {
            let returnValue = try await operation()
            completion(.success(returnValue))
        } catch let failure as POFailure {
            completion(.failure(failure))
        } catch {
            let failure = POFailure(code: .internal(.mobile), underlyingError: error)
            completion(.failure(failure))
        }
    }
}

/// Invokes given completion with a result of async operation.
private func invoke<T>(completion: @escaping (T) -> Void, after operation: @escaping () async -> T) -> Task<Void, Never> {
    Task { @MainActor in
        completion(await operation())
    }
}
{% endif %}
{% endfor %}