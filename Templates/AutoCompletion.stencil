// MARK: - AutoCompletion
{% for type in types.protocols|annotated:"AutoCompletion" %}

extension {{ type.name }} {
    {% for method in type.methods %}
        {% if not method.isAsync and not method.throws %}
            {% continue %}
        {% endif %}

    {% for documentation in method.documentation %}
    /// {{ documentation }}
    {% endfor %}
    {% for key, value in method.attributes %}
    {{ value.first }}
    {% endfor %}
    @available(*, deprecated, message: "Use the async method instead.")
    @discardableResult
    public func {{ method.callName }}(
        {% for parameter in method.parameters %}
        {% if parameter.argumentLabel != parameter.name %}{{ parameter.argumentLabel }} {% endif %}{{ parameter.name }}: sending {{ parameter.typeName.asSource }}{% if parameter.defaultValue %} = {{ parameter.defaultValue }}{% endif %},
        {% endfor %}
        completion: sending @escaping @isolated(any) (Result<{{ method.returnTypeName.asSource }}, POFailure>) -> Void
    ) -> POCancellable {
        Task { @MainActor in
            do {
                await completion(.success(try await {{ method.callName }}({% for parameter in method.parameters %}{% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %})))
            } catch {
                await completion(.failure(error as! POFailure))
            }
        }
    }
    {% endfor %}
}
{% endfor %}
